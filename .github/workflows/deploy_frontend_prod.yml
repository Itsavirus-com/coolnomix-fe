# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    tags:
      - 'v+[0-9]+.[0-9]+.[0-9]+'

name: Deploy Frontend to Amazon ECS (Production Cluster)

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dashboard-factum-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          #copy env file from s3
          aws s3 cp ${{ secrets.S3_BUCKET_URI }} .docker/envfile
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker buildx build -f .docker/dockerfile.prod \
              --build-arg ENVIRONMENT=$ENVIRONMENT \
              --build-arg API_BASE_URL=$API_BASE_URL \
              --build-arg SENTRY_DSN=$SENTRY_DSN \
              --build-arg ASSETS_BASE_URL=$ASSETS_BASE_URL \
              --build-arg DEEP_LINK_BASE_URL=$DEEP_LINK_BASE_URL \
              --build-arg COUNTDOWN_TIME=$COUNTDOWN_TIME \
              --build-arg APP_STORE_LINK=$APP_STORE_LINK \
              --build-arg GOOGLE_STORE_LINK=$GOOGLE_STORE_LINK \
              --build-arg APPLE_MAP_API_BASE_URL=$APPLE_MAP_API_BASE_URL \
              --build-arg E2E_TEST_ENV=$E2E_TEST_ENV \
              --build-arg CYPRESS_RECORD_KEY=$CYPRESS_RECORD_KEY \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Generate task definition (API)
        id: api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definitions/production-dashboard-task.json
          container-name: factum-dashboard-service
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy the task definition (API)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.api-task-def.outputs.task-definition }}
          service: factum-dashboard-service
          cluster: factum-production-cluster
          wait-for-service-stability: true
