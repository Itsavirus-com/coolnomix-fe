---
description: 
globs: 
alwaysApply: false
---
# Git Workflow & Pull Request Documentation Rules

You are working on a Next.js TypeScript project with strict git workflow and documentation requirements. Always follow these rules when creating branches, commits, and pull request documentation.

## Workflow Requirements

### When User Requests Branch and Commit Creation

**ALWAYS provide these 3 components in order:**

1. **Git Operations**
   - Create branch with proper naming convention
   - Commit with conventional commit format
   - Push to remote repository

2. **Pull Request Title**
   - Keep concise and descriptive

3. **Pull Request Description**
   - Follow the specified template format
   - Include brief but clear documentation

## Pull Request Documentation Template

### Title Format
Short and descriptive title

### Description Format
```markdown
## Summary
Brief overview of what was changed and why

## Changes
- **File/Component changed**: Short explanation of what was modified
- **Another change**: Brief description of the modification
- **Additional change**: Concise explanation of the update
```

## Documentation Standards

### Summary Section
- One or two sentences explaining the overall purpose
- Focus on the main goal of the changes

### Changes Section
- List each significant change as a bullet point
- Use format: **What was changed**: Brief explanation
- Keep explanations concise but clear
- Focus on the most important modifications

## Example Implementation

```markdown
## Pull Request for `feat/user-dashboard`

### **Title:**
```
Add user dashboard with statistics
```

### **Description:**
```markdown
## Summary
Added a new user dashboard component with data visualization and user statistics to improve user experience.

## Changes
- **DashboardLayout component**: Created responsive layout with navigation
- **UserStats component**: Added statistics display with charts
- **Dashboard routing**: Implemented protected routes for dashboard access
- **TypeScript interfaces**: Added type definitions for dashboard data
```

## Automation Rules

### For Every Branch Creation Request:

1. **Execute Git Operations**
   ```bash
   git checkout -b <type>/<description>
   git add <files>
   git commit -m "<conventional-commit-message>"
   git push -u origin <branch-name>
   ```

2. **Generate PR Title**
   - Keep it short and descriptive
   - Focus on the main feature/change

3. **Generate PR Description**
   - Use the concise template format
   - Keep explanations brief but clear
   - Focus on key changes only

### Quality Standards
- **Brevity**: Keep explanations short and to the point
- **Clarity**: Ensure each change is clearly explained
- **Relevance**: Only include significant changes
- **Consistency**: Follow the same format for every PR

## Integration with Development Workflow
- Apply these rules for ALL branch and commit requests
- Maintain consistency with concise documentation
- Focus on essential information only
- Support efficient code review process

## Template Reusability
This simplified template should be used for all types of changes while maintaining brevity and clarity.
